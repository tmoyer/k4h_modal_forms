<?php

/**
 * @file Integration for k4h site and epub_export.
 */

/**
 * Implements hook_menu().
 */
function k4h_modal_forms_menu() {
  $items = array();
  $items['admin/config/development/k4h_modal_forms'] = array(
    'title' => 'K4H Modal Forms',
    'description' => 'Setup configuration for K4H modal forms (for nodes with custom forms embedded in content).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('k4h_modal_forms_settings'),
    'position' => 'right',
    'weight' => 0,
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
    'file' => 'k4h_modal_forms.admin.inc',
  );
  $items['k4h_modal_forms/autocomplete'] = array(
    'title' => t('Autocomplete menu'),
    'page callback' => 'k4h_modal_forms_select',
    'access callback' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function k4h_modal_forms_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;
  $args = arg();

  if ($form_id == 'webform_configure_form') {
    $sm_type = variable_get('modal_forms_popup_small_type', 'fixed');
    $md_type = variable_get('modal_forms_popup_medium_type', 'fixed');
    $lg_type = variable_get('modal_forms_popup_larg_type', 'scale');
    $modals = array(
      'small' => array(
        'type' => $sm_type,
        'size' => ($sm_type == 'fixed') ? variable_get('modal_forms_popup_small_width', '300') . ' px x ' . variable_get('modal_forms_popup_small_height', '300') . ' px' : variable_get('modal_forms_popup_small_width', '300') * 100 . '%',
      ),
      'medium' => array(
        'type' => $md_type,
        'size' => ($md_type == 'fixed') ? variable_get('modal_forms_popup_medium_width', '550') . ' px x ' . variable_get('modal_forms_popup_medium_height', '450') . ' px' : variable_get('modal_forms_popup_medium_width', '550') * 100 . '%',
      ),
      'large' => array(
        'type' => $lg_type,
        'size' => ($lg_type == 'fixed') ? variable_get('modal_forms_popup_large_width', '0.8') . ' px x ' . variable_get('modal_forms_popup_large_height', '0.8') . ' px' : variable_get('modal_forms_popup_large_width', '0.8') * 100 . '%',
      ),
    );
    $defaults = unserialize(variable_get('k4h_modal_forms_' . arg(1), ''));
    $modal_node = (!empty($defaults)) ? node_load($defaults['k4h_modal_node_autocomplete']) : NULL;
    $node_autocomplete = (isset($modal_node->title)) ? "$modal_node->title [id: $modal_node->nid]" : '';
    $form['k4h_modal'] = array(
      '#type' => 'fieldset',
      '#title' => 'K4H Modal Form Popup',
      '#collapsible' => 1,
      '#collapsed' => 1,
      '#weight' => -2,
    );
    $form['k4h_modal']['k4h_modal_node_autocomplete'] =  array(
      '#type' => 'textfield',
      '#title' => 'Autocomplete node field',
      '#description' => 'Find the node you want this form associated with',
      '#maxlength' => 512,
      '#autocomplete_path' => 'ctools/autocomplete/node',
      '#ajax' => array(
        'callback' => '_k4h_modal_forms_fields_list',
        'wrapper' => 'node-fields-list',
        'method' => 'replace',
        'event' => 'blur',
      ),
      '#default_value' => $node_autocomplete,
    );
    $override_options = (!empty($modal_node)) ?  _k4h_modal_forms_fields_list_options($modal_node->type, $modal_node) : k4h_modal_forms_get_usable_fields();
    $form['k4h_modal']['k4h_modal_field_override'] = array(
      '#tree' => FALSE,
      '#prefix' => '<div id="node-fields-list">',
      '#suffix' => '</div>',
      '#type' => 'radios',
      '#title' => 'Attach popup to field',
      '#description' => 'Select the field to attach the popup to.',
      '#options' => $override_options,
      '#default_value' => (!empty($defaults['k4h_modal_field_override'])) ? $defaults['k4h_modal_field_override'] : '',
    ); // end k4h_modal_field_override
    $form['k4h_modal']['k4h_modal_forward_action'] = array(
      '#type' => 'radios',
      '#title' => 'Select when to forward the user to the resource',
      '#options' => array(
        'submit' => 'Only on submit',
        'both' => 'On submit and on cancel',
      ),
      '#default_value' => (!empty($defaults['k4h_modal_forward_action'])) ? $defaults['k4h_modal_forward_action'] : 'both',
    );
    $form['k4h_modal']['k4h_modal_cancel_link'] = array(
      '#type' => 'textfield',
      '#title' => 'Text to use for the cancel link',
      '#maxlength' => 512,
      '#default_value' => (!empty($defaults['k4h_modal_cancel_link'])) ? $defaults['k4h_modal_cancel_link'] : t('No thanks'),
    );
    $form['k4h_modal']['k4h_modal_modal_size'] = array(
      '#type' => 'radios',
      '#title' => 'Popup size',
      '#options' => array(
        'small' => 'Small (' . $modals['small']['size'] . ')',
        'medium' => 'Medium (' . $modals['medium']['size'] . ')',
        'large' => 'Large (' . $modals['large']['size'] . ')',
      ),
      '#default_value' => (!empty($defaults['k4h_modal_modal_size'])) ? $defaults['k4h_modal_modal_size'] : 'small',
    );
    $form['#submit'][] = 'k4h_modal_forms_webform_submit';

    if (!empty($form_state['values']['k4h_modal_node_autocomplete'])) {
      $values = $form_state['values'];
      $value = (strstr($values['k4h_modal_node_autocomplete'], '[id:')) ? $values['k4h_modal_node_autocomplete'] : $form_state['triggering_element']['#value'];
      if (strstr($value, '[id:')) {
        $nid_parts = explode('[', $form_state['values']['k4h_modal_node_autocomplete']);
        $nid_parts2 = explode(': ', rtrim($nid_parts[1], ']'));
        $node = node_load($nid_parts2[1]);
      }
      $type = (isset($node)) ? $node->type : NULL;
      $form['k4h_modal']['k4h_modal_field_override']['#options'] = _k4h_modal_forms_fields_list_options($type, $node);
    }

  } // end if this is a webform

  // Skip if the form isn't being loaded in a modal
  if ($args[0] != 'modal_forms' && $args[1] != 'ajax') {
    RETURN;
  }
  $modal_pages = unserialize(variable_get('k4h_modal_nodes', ''));
  // If there are no pages with modal popups on them, stop here
  if (empty($modal_pages)) {
    return;
  }
  foreach ($modal_pages as $nid => $webform_nid) {
    // Only proceed if this is a page with a modal form popup
    if ($webform_nid != $args[3]) {
      continue;
    }
    $modal_details = unserialize(variable_get('k4h_modal_forms_' . $webform_nid));
    // Add to the email tracking for content adpatation form
    if ($form_id == 'webform_client_form_' . $webform_nid) {
      if (current_path() == 'system/ajax') {
        $current_path = (!empty($base_url)) ? $base_url : $_SERVER['HTTP_REFERER'];
      }
      $cancel_text = (isset($modal_details['k4h_modal_cancel_link']) && !empty($modal_details['k4h_modal_cancel_link'])) ? t($modal_details['k4h_modal_cancel_link']) : t('No thanks@');
      $form['#submit'][] = 'k4h_modal_forms_email_tracking_submit';
      $class = 'ctools-modal-modal-popup-' . $modal_details['k4h_modal_modal_size'];
      $form['actions']['cancel'] = array(
        '#markup' => l($cancel_text, '/modal_forms/nojs/dismiss', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-modal-popup-' . $modal_details['k4h_modal_modal_size'], 'button', 'green'))))
      );
    }
  }
}

/**
 * Autocomplete callback to find node by title.
 */
function k4h_modal_forms_select($string) {
  $result = db_query("SELECT title, nid FROM {node} WHERE title LIKE '%$string%' LIMIT 10");
  $matches = array();
  foreach ($result as $record) {
    $matches[$record->nid] = check_plain($record->title);
  }
  drupal_json_output($matches);
  exit;
}

/**
 * Submit handler for the modal form submit.
 */
function k4h_modal_forms_email_tracking_submit($form, &$form_state) {
  ctools_include('ajax');
  ctools_include('modal');
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  $form_state['ajax_commands'][] = ctools_modal_form_render($form_state, $output);
}

/**
 * Submit handler for webform config form submit.
 */
function k4h_modal_forms_webform_submit($form, &$form_state) {
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);
  $modal_fields = array('k4h_modal_node_autocomplete', 'k4h_modal_field_override', 'k4h_modal_forward_action', 'k4h_modal_cancel_link', 'k4h_modal_modal_size');
  $k4h_modal_values = array();
  foreach ($form_state['values'] as $key => $value) {
    if (!in_array($key, $modal_fields)) {
      continue;
    }

    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    // Get nid out of the node autocomplete string
    if ($key == 'k4h_modal_node_autocomplete') {
      if (strstr($value, '[id:')) {
        $nid_parts = explode('[', $value);
        $nid_parts2 = explode(': ', rtrim($nid_parts[1], ']'));
        $value = $nid_parts2[1]; // Just assign the nid, we don't need the title
      }
    }
    $k4h_modal_values[$key] = $value;
  }
  if (!empty($k4h_modal_values)) {
    variable_set('k4h_modal_forms_' . arg(1), serialize($k4h_modal_values));
    $current_nodes = unserialize(variable_get('k4h_modal_nodes', ''));
    $new_node = array($k4h_modal_values['k4h_modal_node_autocomplete'] => arg(1));
    if (!empty($current_nodes)) {
      if (!array_key_exists($k4h_modal_values['k4h_modal_node_autocomplete'], $current_nodes)) {
        // Remove any previous entries for this page/webform
        if (($key = array_search(arg(1), $current_nodes)) !== FALSE) {
          unset($current_nodes[$key]);
        }
        // Add new entry to data to be saved
        $current_nodes[$k4h_modal_values['k4h_modal_node_autocomplete']] = arg(1);
      }
    } else {
      $current_nodes = $new_node;
    }
    if (!empty($current_nodes)) {
      variable_set('k4h_modal_nodes', serialize($current_nodes));
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Adds in JS to handle forwarding the user to the selected resource
 * when the modal is closed.
 */
function k4h_modal_forms_preprocess_page($vars) {
  $args = arg();
  $node_path = drupal_lookup_path('source', ltrim(request_uri(), '/'));
  $page_nid = substr($node_path, 5);

  $modal_pages = unserialize(variable_get('k4h_modal_nodes', ''));
  // If there are no pages with modal popups on them, stop here
  if (empty($modal_pages)) {
    return;
  }
  foreach ($modal_pages as $nid => $webform_nid) {
    // Only proceed if this is a page with a modal form popup
    if ($nid != $page_nid) {
      continue;
    }
    $modal_details = unserialize(variable_get('k4h_modal_forms_' . $webform_nid));

    // If there are no details to work with, stop
    if (empty($modal_details)) {
      continue;
    }

    if (isset($vars['page']['content']['system_main']['nodes']) && $vars['page']['content']['system_main']['nodes'][$nid]) {
      $node = node_load($nid);
      // Link to the resource will either be from a link field or a file field
      $link = strstr($modal_details['k4h_modal_field_override'], 'public://') ? file_create_url($modal_details['k4h_modal_field_override']) : $modal_details['k4h_modal_field_override'];
      if ($modal_details['k4h_modal_forward_action'] == 'both') {
        drupal_add_js("
          jQuery(document).ready(function ($) {
            $(document).on('CToolsDetachBehaviors', function() {
              window.location.href = '" . $link . "';
            });
          });
        ", array('type' => 'inline', 'scope' => 'footer'));
        $vars['scripts'] = drupal_get_js();
      }
    }
  }
}

/**
 * Implements hook_process_html().
 */
function k4h_modal_forms_process_html(&$vars) {
  global $base_url;
  $args = arg();
  $node_path = drupal_lookup_path('source', ltrim(request_uri(), '/'));
  $page_nid = substr($node_path, 5);
  $modal_pages = unserialize(variable_get('k4h_modal_nodes', ''));
  // If there are no pages with modal popups on them, stop here
  if (empty($modal_pages)) {
    return;
  }
  foreach ($modal_pages as $nid => $webform_nid) {
    // Only proceed if this is a page with a modal form popup
    if ($nid != $page_nid) {
      continue;
    }
    $modal_details = unserialize(variable_get('k4h_modal_forms_' . $webform_nid));

    // Use Drupal's filter_dom_load() to create the dom object
    $dom = filter_dom_load($vars['page']);
    $links = $dom->getElementsByTagName('a');
    $override_link = strstr($modal_details['k4h_modal_field_override'], 'public://') ? file_create_url($modal_details['k4h_modal_field_override']) : $modal_details['k4h_modal_field_override'];
    $base_length = strlen($base_url);
    $override_link = (strstr($override_link, $base_url)) ? substr($override_link, $base_length) : $override_link;
    foreach ($links as $tag) {
      if ($tag->getAttribute('href') == $override_link) {
        $tag->setAttribute('href', '/modal_forms/nojs/webform/' . $webform_nid);
        $tag->setAttribute('class', 'ctools-use-modal ctools-modal-modal-popup-' . $modal_details['k4h_modal_modal_size']);
        $vars['page'] = filter_dom_serialize($dom);
      }
    }

/* Let's use DOMDocument (above) to parse and change the HTML instead of waiting for jQuery
 * to load and alter the link, but keep the jQuery for now, just in case

    // Define the dataLayer for Google TagManager
    $js = "<!--//--><![CDATA[//><!--
      jQuery(document).ready(function ($) {
        $('.file').find('a').addClass('ctools-use-modal ctools-modal-modal-popup-" . $modal_details['k4h_modal_modal_size'] . "').attr('href', '/modal_forms/nojs/webform/" . $webform_nid . "').removeAttr('type');
      });
      //--><!]]>
      ";
    $output = array(
      '#type' => 'markup',
      '#markup' => '<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script><script type="text/javascript">' . $js . '</script>' . "\r\n",
    );
    $vars['page_top'] = drupal_render($output) . $vars['page_top'];
*/
  }
  return $vars;
}

/**
 * Provides a list of available fields used within a content type (bundle).
 *
 * @param $bundle
 *   A bundle type / content type.
 *
 * @return
 *   An array of fields indexed by fieldname.
 */
function k4h_modal_forms_get_available_fields($bundle, $node) {
  $usable_fields = k4h_modal_forms_get_usable_fields();
  $keys = array_keys(field_info_instances('node', $bundle));
  $fields = array();
  foreach ($keys as $key) {
    if (in_array($key, $usable_fields)) {
      foreach ($node->{$key}[LANGUAGE_NONE] as $id => $link) {
        if (!empty($link['url'])) {
          $text = (!empty($link['title'])) ? $link['title'] : $link['url'];
          $l = l($text, $link['url']);
          $fields[$link['url']] = $l . ' (' . $key . ')';
        } elseif (!empty($link['uri'])) {
          $text = (!empty($link['description'])) ? $link['description'] : $link['filename'];
          $l = l($text, file_create_url($link['uri']));
          $fields[$link['uri']] = $l . ' (' . $key . ')';
        }
      }
    }
  }
  return $fields;
}

/**
 * Provides a list of all possible link and file type fields.
 *
 * @return
 *   An array of fields indexed by fieldname.
 */
function k4h_modal_forms_get_usable_fields() {
  $fields = &drupal_static(__FUNCTION__);
  if (!isset($fields)) {
    if ($cache = cache_get('k4h_modal_forms_usable_fields')) {
      $fields = $cache->data;
    }
    else {
      $result = db_query("select field_name from field_config where type in (:types)", array(':types' => array('file', 'link_field')));
      $fields = array();
      foreach ($result as $record) {
        $fields[$record->field_name] = $record->field_name;
      }
      cache_set('k4h_modal_forms_usable_fields', $fields, 'cache');
    }
  }
  return $fields;
}

/**
 * AJAX callback for node form element.
 *
 * @param array $form
 *   Form API form.
 * @param array $form_state
 *   Form API form state.
 *
 * @return
 *   Form API array.
 */
function _k4h_modal_forms_fields_list($form, $form_state) {
  return $form['k4h_modal']['k4h_modal_field_override']; // return the full fields container
}

/**
 * Provides either the full list of possible link and file fields
 * or a subset available within a bundle/content type.
 *
 * @param $bundle
 *   Bundle name / content type.
 *
 * @return
 *   An array of fields indexed by fieldname.
 */
function _k4h_modal_forms_fields_list_options($bundle = NULL, $node = NULL) {
  if (!empty($bundle)) {
    return k4h_modal_forms_get_available_fields($bundle, $node);
  }
  return k4h_modal_forms_get_usable_fields();
}
